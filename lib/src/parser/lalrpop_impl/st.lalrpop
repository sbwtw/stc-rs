use crate::ast::*;
use crate::parser::*;
use std::sync::Arc;
use smallvec::smallvec;

grammar;

extern {
    type Location = Location;
    type Error = LexicalError;

    enum TokenKind {
        "." => TokenKind::DotAccess,
        ".." => TokenKind::DotRange,
        "+" => TokenKind::Plus,
        "-" => TokenKind::Minus,
        "*" => TokenKind::Multiply,
        "**" => TokenKind::Power,
        "/" => TokenKind::Division,
        "(" => TokenKind::LeftParentheses,
        ")" => TokenKind::RightParentheses,
        "[" => TokenKind::LeftBracket,
        "]" => TokenKind::RightBracket,
        "," => TokenKind::Comma,
        ";" => TokenKind::Semicolon,
        ":=" => TokenKind::Assign,
        "=>" => TokenKind::AssignRight,
        ":" => TokenKind::Colon,
        "=" => TokenKind::Equal,
        "<>" => TokenKind::NotEqual,
        ">" => TokenKind::Greater,
        ">=" => TokenKind::GreaterEqual,
        "<" => TokenKind::Less,
        "<=" => TokenKind::LessEqual,
        "|" => TokenKind::BitOr,
        "&" => TokenKind::BitAnd,
        "XOR" => TokenKind::Xor,
        "NOT" => TokenKind::Not,
        "MOD" => TokenKind::Mod,
        "ARRAY" => TokenKind::Array,
        "IF" => TokenKind::If,
        "OF" => TokenKind::Of,
        "THEN" => TokenKind::Then,
        "ELSE" => TokenKind::Else,
        "ELSEIF" => TokenKind::ElseIf,
        "END_IF" => TokenKind::EndIf,
        "FUNCTION" => TokenKind::Function,
        "END_FUNCTION" => TokenKind::EndFunction,
        "PROGRAM" => TokenKind::Program,
        "END_PROGRAM" => TokenKind::EndProgram,
        "STRUCT" => TokenKind::Struct,
        "END_STRUCT" => TokenKind::EndStruct,
        "VAR" => TokenKind::Var,
        "VAR_GLOBAL" => TokenKind::VarGlobal,
        "VAR_INPUT" => TokenKind::VarInput,
        "VAR_INOUT" => TokenKind::VarInOut,
        "VAR_OUTPUT" => TokenKind::VarOutput,
        "VAR_TEMP" => TokenKind::VarTemp,
        "VAR_STAT" => TokenKind::VarStat,
        "END_VAR" => TokenKind::EndVar,
        "RETAIN" => TokenKind::Retain,
        "PERSISTENT" => TokenKind::Persistent,
        "TYPE" => TokenKind::Type,
        "END_TYPE" => TokenKind::EndType,
        "INT" => TokenKind::Int,
        "BOOL" => TokenKind::Bool,
        "REAL" => TokenKind::Real,
        "BYTE" => TokenKind::Byte,
        "BIT" => TokenKind::Bit,
        "LITERAL" => TokenKind::Literal(<LiteralValue>),
        "IDENTIFIER" => TokenKind::Identifier(<StString>),
    }
}

/// Comma split values
Comma<T>: Vec<T> = {
    <v:(<T> ",")+> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

// TODO: Bad implementation
SmallComma<T>: SmallVec8<T> = {
    <v:(<T> ",")+> <e:T?> => match e {
        None => SmallVec8::from_vec(v),
        Some(e) => {
            let mut v = SmallVec8::from_vec(v);
            v.push(e);
            v
        }
    }
};

SmallComma3<T>: SmallVec3<T> = {
    <v:(<T> ",")+> <e:T?> => match e {
        None => SmallVec3::from_vec(v),
        Some(e) => {
            let mut v = SmallVec3::from_vec(v);
            v.push(e);
            v
        }
    }
};

/// Top-Level ST decl + impl body
pub StPOU: (Declaration, Statement) = {
    Declaration StatementList,
}

/// Top-level ST function body
pub StBody = StatementList;

/// ST Statements
StatementList: Statement = {
    Statement,
    <v: StatementList> <s: Statement> => v.push(s),
}

/// Single statement
Statement: Statement = {
    <start: @L> <e:Expr> ";" <end: @R> => Statement::expr(Box::new(ExprStatement::new(e)), Some(start), Some(end)),
    <start: @L> <e:IfStatement> <end: @R> => Statement::if_stmt(Box::new(e), Some(start), Some(end)),
}

IfStatement: IfStatement = {
    "IF" <cond: Expr> "THEN" <then_ctrl: StatementList> "END_IF" => IfStatement::from_then(<>),
    "IF" <cond: Expr> "THEN" <then_ctrl: StatementList> "ELSE" <else_ctrl: StatementList> "END_IF" => IfStatement::from_then_else(<>),
    "IF" <cond: Expr> "THEN" <then_ctrl: StatementList> <else_if_list: ElseIfStatementList> "ELSE" <else_ctrl: StatementList> "END_IF" => IfStatement::from_then_elseif_else(<>),
}

/// ElseIf list wrap in if statement
ElseIfStatementList: Vec<ElseIfStatement> = {
    ElseIfStatement+
}

/// Single ElseIf statement
ElseIfStatement: ElseIfStatement = {
    "ELSEIF" <cond: Expr> "THEN" <then_ctrl: StatementList> => ElseIfStatement::from_then(<>),
}

/// Expression
pub Expr: Expression = {
    BitOrExpr,
    AssignExpr => <>.into_expression(),
    CallExpr => <>.into_expression(),
};

VarExpr: Expression = {
    "IDENTIFIER" => Expression::variable(Box::new(VariableExpression::new(<>))),
}

AssignExpr: AssignExpression = {
    <lhs: Expr> ":=" <rhs: BitOrExpr> => AssignExpression::new(<>),
    <lhs: Expr> "=>" <rhs: BitOrExpr> => AssignExpression::with_type(<>, AssignType::AssignRight),
}

CallExpr: CallExpression = {
    <callee: CompoFactor> "(" ")" => CallExpression::new(<>),
    <callee: CompoFactor> "(" <arg: Expr> ")" => CallExpression::with_arguments(callee, smallvec![arg]),
    <callee: CompoFactor> "(" <args: SmallComma<Expr>> ")" => CallExpression::with_arguments(<>),
}

BitOrExpr: Expression = {
    <lhs: BitOrExpr> <op: "|"> <rhs: XorExpr> => Expression::operator(Box::new(OperatorExpression::new(op.into(), smallvec![lhs, rhs]))),
    XorExpr,
}

XorExpr: Expression = {
    <lhs: XorExpr> <op: "XOR"> <rhs: BitAndExpr> => Expression::operator(Box::new(OperatorExpression::new(op.into(), smallvec![lhs, rhs]))),
    BitAndExpr,
}

BitAndExpr: Expression = {
    <lhs: BitAndExpr> <op: "&"> <rhs: EquExpr> => OperatorExpression::new(op.into(), smallvec![lhs, rhs]).into_expression(),
    EquExpr,
}

EquOp: TokenKind = {
    "=" => TokenKind::Equal,
    "<>" => TokenKind::NotEqual,
}

EquExpr: Expression = {
    <lhs: EquExpr> <op: EquOp> <rhs: CmpExpr> => Expression::operator(Box::new(OperatorExpression::new(op.into(), smallvec![lhs, rhs]))),
    CmpExpr,
}

CmpOp: TokenKind = {
    ">" => TokenKind::Greater,
    ">=" => TokenKind::GreaterEqual,
    "<" => TokenKind::Less,
    "<=" => TokenKind::LessEqual,
}

CmpExpr: Expression = {
    <lhs: CmpExpr> <op: CmpOp> <rhs: OpExpr> => Expression::operator(Box::new(OperatorExpression::new(op.into(), smallvec![lhs, rhs]))),
    OpExpr,
}

/// Low-priority op
ExprOp: TokenKind = {
    "+" => TokenKind::Plus,
    "-" => TokenKind::Minus,
};

/// Low-priority op expression
OpExpr: Expression = {
    <e1: OpExpr> <op: ExprOp> <e2: Factor> => Expression::operator(Box::new(OperatorExpression::new(op.into(), smallvec![e1, e2]))),
    Factor,
}

/// High-priority op
FactorOp: TokenKind = {
    "*" => TokenKind::Multiply,
    "/" => TokenKind::Division,
    "MOD" => TokenKind::Mod,
};

/// High-priority factor
Factor: Expression = {
    <e1: Factor> <op: FactorOp> <e2: PowerExpr> => Expression::operator(Box::new(OperatorExpression::new(op.into(), smallvec![e1, e2]))),
    PowerExpr,
};

PowerExpr: Expression = {
    <e1: PowerExpr> <op: "**"> <e2: UnaryFactor> => Expression::operator(Box::new(OperatorExpression::new(op.into(), smallvec![e1, e2]))),
    UnaryFactor,
}

/// Top priority unary op
UnaryOp: TokenKind = {
    "-" => TokenKind::Minus,
    "NOT" => TokenKind::Not,
};

/// Top priority unary factor
UnaryFactor: Expression = {
    <op: UnaryOp> <e: CompoFactor> => Expression::operator(Box::new(OperatorExpression::new(op.into(), smallvec![e]))),
    CompoFactor,
}

/// Variable compo access factor
CompoFactor: Expression = {
    <left: CompoFactor> "." <right: Term> => Expression::compo(Box::new(CompoAccessExpression::new(<>))),
    Term,
}

/// terminals in expression
Term: Expression = {
    LiteralExpr => Expression::literal(Box::new(<>)),
    "(" <Expr> ")",
    VarExpr,
};

/// Literal expressions
pub LiteralExpr: LiteralExpression = {
    "LITERAL" => LiteralExpression::new(<>),
}

/// Declarations
pub Declaration = SingleDeclaration;

SingleDeclaration: Declaration = {
    "TYPE" <ty: TypeDeclaration> "END_TYPE" => ty,
    GlobalVarDeclareFactor => Declaration::global_var(Box::new(GlobalVariableDeclare::new(None, <>))),
    FuncDecl => Declaration::fun(Box::new(<>)),
}

FuncDecl: FunctionDeclare = {
    "FUNCTION" <name: "IDENTIFIER"> ":" <ty: Type?> <v: VariableDeclareFactor?> "END_FUNCTION" => FunctionDeclare::new(name, DeclareClass::Function, ty, v.unwrap_or(smallvec![])),
    "PROGRAM" <name: "IDENTIFIER"> ":" <ty: Type?> <v: VariableDeclareFactor?> "END_PROGRAM" => FunctionDeclare::new(name, DeclareClass::Program, ty, v.unwrap_or(smallvec![])),
}

TypeDeclaration: Declaration = {
    <name: "IDENTIFIER"> ":" "(" <fields: SmallComma<EnumFieldDecl>> ")" <ty: Type?> ";" => Declaration::enum_(Box::new(EnumDeclare::new(name, ty, fields))),
    <name: "IDENTIFIER"> ":" <alias: Type> ";" => Declaration::alias(Box::new(AliasDeclare::new(<>))),
    <name: "IDENTIFIER"> ":" "STRUCT" <vars: VariableDeclareList> "END_STRUCT" => Declaration::struct_(Box::new(StructDeclare::new(<>))),
}

EnumFieldDecl: Arc<Variable> = {
    <name: "IDENTIFIER"> => Arc::new(Variable::new(name)),
    <name: "IDENTIFIER"> ":=" <value: "LITERAL"> => Arc::new(Variable::with_initial(name, Box::new(value.into_expression()))),
}

/// Type
pub Type: Type = {
    "BIT" => BitType::new_type(),
    "INT" => IntType::new_type(),
    "BOOL" => BoolType::new_type(),
    "BYTE" => ByteType::new_type(),
    "REAL" => RealType::new_type(),
    "IDENTIFIER" => UnknownType::from_name(<>).into(),
    <arr: ArrayType> => arr.into(),
}

ArrayType: ArrayType = {
    "ARRAY" "[" <dim: RangeExpr> "]" "OF" <base_type: Type> => ArrayType::new(base_type, smallvec![dim]),
    "ARRAY" "[" <dim: SmallComma3<RangeExpr>> "]" "OF" <base_type: Type> => ArrayType::new(base_type, dim),
}

RangeExpr: RangeExpression = {
    <lower: Expr> ".." <upper: Expr> => RangeExpression::new(<>),
}

/// Variable declare groups flat
VariableDeclareFactor: SmallVec8<Arc<Variable>> = {
    VariableDeclareGroup,
    <mut v: VariableDeclareFactor> <mut e: VariableDeclareGroup> => { v.append(&mut e); v }
}

GlobalVarDeclareFactor: SmallVec8<Arc<Variable>> = {
    GlobalVarDeclGroup,
    <mut v: GlobalVarDeclareFactor> <mut e: GlobalVarDeclGroup> => { v.append(&mut e); v }
}

/// Single variable declare group, constain a list of same scope variable
VariableDeclareGroup: SmallVec8<Arc<Variable>> = {
    VariableDeclareGroupStart VariableDeclareGroupAnnotation? "END_VAR" => smallvec![],
    <g: VariableDeclareGroupStart> <anno: VariableDeclareGroupAnnotation?> <v: VariableDeclareList> "END_VAR" => VariableDeclareGroup::from_variables(anno.unwrap_or(VariableFlags::NONE) | g, v),
}

GlobalVarDeclGroup: SmallVec8<Arc<Variable>> = {
    "VAR_GLOBAL" VariableDeclareGroupAnnotation? "END_VAR" => smallvec![],
    "VAR_GLOBAL" <anno: VariableDeclareGroupAnnotation?> <v: VariableDeclareList> "END_VAR" => VariableDeclareGroup::from_variables(anno.unwrap_or(VariableFlags::NONE) | VariableFlags::GLOBAL, v),
}

VariableDeclareGroupStart: VariableFlags = {
    "VAR" => VariableFlags::NONE,
    "VAR_INPUT" => VariableFlags::INPUT,
    "VAR_INOUT" => VariableFlags::INOUT,
    "VAR_OUTPUT" => VariableFlags::OUTPUT,
    "VAR_TEMP" => VariableFlags::TEMP,
    "VAR_STAT" => VariableFlags::STATIC,
}

VariableDeclareGroupAnnotation: VariableFlags = {
    "RETAIN" => VariableFlags::RETAIN,
    "PERSISTENT" => VariableFlags::PERSISTENT,
    "RETAIN" "PERSISTENT" => VariableFlags::RETAINPERSISTENT,
    "PERSISTENT" "RETAIN" => VariableFlags::RETAINPERSISTENT,
}

/// A list of same scope varaible
VariableDeclareList: SmallVec8<Arc<Variable>> = {
    MultiVariableDeclareStatement,
    VariableDeclareStatement => smallvec![<>],
    <mut v: VariableDeclareList> <e: VariableDeclareStatement> => { v.push(e); v },
    <mut v: VariableDeclareList> <mut e: MultiVariableDeclareStatement> => { v.append(&mut e); v }
}

/// Single variable declare
VariableDeclareStatement: Arc<Variable> = {
    <ident: "IDENTIFIER"> ":" <ty: Type> ";"  => Arc::new(Variable::with_type(<>)),
}

/// Multiple variable declare in one statement
MultiVariableDeclareStatement: SmallVec8<Arc<Variable>> = {
    <ident_list: SmallComma<"IDENTIFIER">> ":" <ty: Type> ";" => Variable::multiple_variable_with_type(<>),
}