use crate::ast::*;
use crate::parser::lexer::{self, LiteralType, StString};

grammar;

extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum lexer::Tok {
        "+" => lexer::Tok::Plus,
        "-" => lexer::Tok::Minus,
        "*" => lexer::Tok::Multiply,
        "/" => lexer::Tok::Division,
        "(" => lexer::Tok::LeftParentheses,
        ")" => lexer::Tok::RightParentheses,
        "," => lexer::Tok::Comma,
        ";" => lexer::Tok::Semicolon,
        ":=" => lexer::Tok::Assign,
        "IF" => lexer::Tok::If,
        "THEN" => lexer::Tok::Then,
        "ELSE" => lexer::Tok::Else,
        "ELSEIF" => lexer::Tok::ElseIf,
        "END_IF" => lexer::Tok::EndIf,
        "Literal" => lexer::Tok::Literal(<LiteralType>),
        "Variable" => lexer::Tok::Identifier(<StString>),
    }
}

//Comma<T>: Vec<T> = {
//    <v:(<T> ",")*> <e:T?> => match e {
//        None => v,
//        Some(e) => {
//            let mut v = v;
//            v.push(e);
//            v
//        }
//    }
//};

pub CompilationUnits = StatementList;

StatementList: Box<dyn Statement> = {
    Statement+ => Box::new(StatementList(<>))
}

Statement: Box<dyn Statement> = {
    <e:Expr> ";" => Box::new(ExprStatement::new(e)),
    "IF" <cond: Expr> "THEN" <then_ctrl: StatementList> "END_IF" => Box::new(IfStatement::from_then(<>)),
    "IF" <cond: Expr> "THEN" <then_ctrl: StatementList> "ELSE" <else_ctrl: StatementList> "END_IF" => Box::new(IfStatement::from_then_else(<>)),
    "IF" <cond: Expr> "THEN" <then_ctrl: StatementList> <else_if_list: ElseIfStatementList> "ELSE" <else_ctrl: StatementList> "END_IF" => Box::new(IfStatement::from_then_elseif_else(<>)),
}

ElseIfStatementList: Vec<ElseIfStatement> = {
    ElseIfStatement+ => <>
}

ElseIfStatement: ElseIfStatement = {
    "ELSEIF" <cond: Expr> "THEN" <then_ctrl: StatementList> => ElseIfStatement::from_then(<>),
}

Expr: Box<dyn Expression> = {
    <lhs: Expr> ":=" <rhs: OpExpr> => Box::new(AssignExpression::new(<>)),
    OpExpr,
};

ExprOp: OpCode = {
    "+" => OpCode::Add,
    "-" => OpCode::Sub,
};

OpExpr: Box<dyn Expression> = {
    <e1: OpExpr> <op: ExprOp> <e2: Factor> => Box::new(OperatorExpression::new(op, vec![e1, e2])),
    Factor,
}

Factor: Box<dyn Expression> = {
    <e1: Factor> <op: FactorOp> <e2: UnaryFactor> => Box::new(OperatorExpression::new(op, vec![e1, e2])),
    UnaryFactor,
};

FactorOp: OpCode = {
    "*" => OpCode::Mul,
    "/" => OpCode::Div,
};

UnaryFactor: Box<dyn Expression> = {
    <op: UnaryOp> <e: Term> => Box::new(OperatorExpression::new(op, vec![e])),
    Term,
}

UnaryOp: OpCode = {
    "-" => OpCode::Sub,
};

Term: Box<dyn Expression> = {
    "Literal" => Box::new(LiteralExpression::new(<>)),
    "Variable" => Box::new(VariableExpression::new(<>)),
    "(" <Expr> ")",
};
