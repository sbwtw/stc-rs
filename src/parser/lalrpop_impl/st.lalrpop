use crate::ast::*;
use crate::parser::*;
use std::rc::Rc;

grammar;

extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum Tok {
        "." => Tok::Access,
        "+" => Tok::Plus,
        "-" => Tok::Minus,
        "*" => Tok::Multiply,
        "**" => Tok::Power,
        "/" => Tok::Division,
        "(" => Tok::LeftParentheses,
        ")" => Tok::RightParentheses,
        "," => Tok::Comma,
        ";" => Tok::Semicolon,
        ":=" => Tok::Assign,
        ":" => Tok::Colon,
        "=" => Tok::Equal,
        "<>" => Tok::NotEqual,
        ">" => Tok::Greater,
        ">=" => Tok::GreaterEqual,
        "<" => Tok::Less,
        "<=" => Tok::LessEqual,
        "|" => Tok::BitOr,
        "&" => Tok::BitAnd,
        "XOR" => Tok::Xor,
        "NOT" => Tok::Not,
        "MOD" => Tok::Mod,
        "IF" => Tok::If,
        "THEN" => Tok::Then,
        "ELSE" => Tok::Else,
        "ELSEIF" => Tok::ElseIf,
        "END_IF" => Tok::EndIf,
        "FUNCTION" => Tok::Function,
        "END_FUNCTION" => Tok::EndFunction,
        "PROGRAM" => Tok::Program,
        "END_PROGRAM" => Tok::EndProgram,
        "STRUCT" => Tok::Struct,
        "END_STRUCT" => Tok::EndStruct,
        "VAR" => Tok::Var,
        "VAR_GLOBAL" => Tok::VarGlobal,
        "VAR_INPUT" => Tok::VarInput,
        "VAR_INOUT" => Tok::VarInOut,
        "VAR_OUTPUT" => Tok::VarOutput,
        "VAR_TEMP" => Tok::VarTemp,
        "VAR_STAT" => Tok::VarStat,
        "END_VAR" => Tok::EndVar,
        "RETAIN" => Tok::Retain,
        "PERSISTENT" => Tok::Persistent,
        "TYPE" => Tok::Type,
        "END_TYPE" => Tok::EndType,
        "INT" => Tok::Int,
        "BOOL" => Tok::Bool,
        "LITERAL" => Tok::Literal(<LiteralValue>),
        "IDENTIFIER" => Tok::Identifier(<StString>),
    }
}

/// Comma split values
Comma<T>: Vec<T> = {
    <v:(<T> ",")+> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

/// Top-level ST function
pub StFunction = StatementList;

/// ST Statements
StatementList: Statement = {
//    Statement+ => StatementList::new(<>)
    Statement+ => Statement::statement_list(Box::new(<>))
}

/// Single statement
Statement: Statement = {
    DeclarationStatement,
    <e:Expr> ";" => Statement::expr(Box::new(ExprStatement::new(<>))),
    IfStatement => Statement::if_stmt(Box::new(<>)),
}

IfStatement: IfStatement = {
    "IF" <cond: Expr> "THEN" <then_ctrl: StatementList> "END_IF" => IfStatement::from_then(<>),
    "IF" <cond: Expr> "THEN" <then_ctrl: StatementList> "ELSE" <else_ctrl: StatementList> "END_IF" => IfStatement::from_then_else(<>),
    "IF" <cond: Expr> "THEN" <then_ctrl: StatementList> <else_if_list: ElseIfStatementList> "ELSE" <else_ctrl: StatementList> "END_IF" => IfStatement::from_then_elseif_else(<>),
}

/// ElseIf list wrap in if statement
ElseIfStatementList: Vec<ElseIfStatement> = {
    ElseIfStatement+
}

/// Single ElseIf statement
ElseIfStatement: ElseIfStatement = {
    "ELSEIF" <cond: Expr> "THEN" <then_ctrl: StatementList> => ElseIfStatement::from_then(<>),
}

/// Expression
Expr: Expression = {
    BitOrExpr,
    AssignExpr => Expression::assign(Box::new(<>)),
};

AssignExpr: AssignExpression = {
    <lhs: Expr> ":=" <rhs: BitOrExpr> => AssignExpression::new(<>),
}

BitOrExpr: Expression = {
    <lhs: BitOrExpr> <op: "|"> <rhs: XorExpr> => Expression::operator(Box::new(OperatorExpression::new(op, vec![lhs, rhs]))),
    XorExpr,
}

XorExpr: Expression = {
    <lhs: XorExpr> <op: "XOR"> <rhs: BitAndExpr> => Expression::operator(Box::new(OperatorExpression::new(op, vec![lhs, rhs]))),
    BitAndExpr,
}

BitAndExpr: Expression = {
    <lhs: BitAndExpr> <op: "&"> <rhs: EquExpr> => Expression::operator(Box::new(OperatorExpression::new(op, vec![lhs, rhs]))),
    EquExpr,
}

EquOp: Tok = {
    "=" => Tok::Equal,
    "<>" => Tok::NotEqual,
}

EquExpr: Expression = {
    <lhs: EquExpr> <op: EquOp> <rhs: CmpExpr> => Expression::operator(Box::new(OperatorExpression::new(op, vec![lhs, rhs]))),
    CmpExpr,
}

CmpOp: Tok = {
    ">" => Tok::Greater,
    ">=" => Tok::GreaterEqual,
    "<" => Tok::Less,
    "<=" => Tok::LessEqual,
}

CmpExpr: Expression = {
    <lhs: CmpExpr> <op: CmpOp> <rhs: OpExpr> => Expression::operator(Box::new(OperatorExpression::new(op, vec![lhs, rhs]))),
    OpExpr,
}

/// Low-priority op
ExprOp: Tok = {
    "+" => Tok::Plus,
    "-" => Tok::Minus,
};

/// Low-priority op expression
OpExpr: Expression = {
    <e1: OpExpr> <op: ExprOp> <e2: Factor> => Expression::operator(Box::new(OperatorExpression::new(op, vec![e1, e2]))),
    Factor,
}

/// High-priority op
FactorOp: Tok = {
    "*" => Tok::Multiply,
    "/" => Tok::Division,
    "MOD" => Tok::Mod,
};

/// High-priority factor
Factor: Expression = {
    <e1: Factor> <op: FactorOp> <e2: PowerExpr> => Expression::operator(Box::new(OperatorExpression::new(op, vec![e1, e2]))),
    PowerExpr,
};

PowerExpr: Expression = {
    <e1: PowerExpr> <op: "**"> <e2: UnaryFactor> => Expression::operator(Box::new(OperatorExpression::new(op, vec![e1, e2]))),
    UnaryFactor,
}

/// Top priority unary op
UnaryOp: Tok = {
    "-" => Tok::Minus,
    "NOT" => Tok::Not,
};

/// Top priority unary factor
UnaryFactor: Expression = {
    <op: UnaryOp> <e: CompoFactor> => Expression::operator(Box::new(OperatorExpression::new(op, vec![e]))),
    CompoFactor,
}

/// Variable compo access factor
CompoFactor: Expression = {
    <left: CompoFactor> "." <right: Term> => Expression::compo(Box::new(CompoAccessExpression::new(<>))),
    Term,
}

/// terminals in expression
Term: Expression = {
    "LITERAL" => Expression::literal(Box::new(LiteralExpression::new(<>))),
    "IDENTIFIER" => Expression::variable(Box::new(VariableExpression::new(<>))),
    "(" <Expr> ")",
};

/// Declaration statement
DeclarationStatement: Statement = {
    Declaration => Statement::decl(Box::new(<>)),
}

/// Declarations
pub Declaration: DeclarationStatement = {
    "TYPE" <ty: TypeDeclaration> "END_TYPE" => ty,
    FuncDecl => DeclarationStatement::fun(Box::new(<>)),
}

FuncDecl: FunctionDeclare = {
    "FUNCTION" <name: "IDENTIFIER"> ":" <ty: Type?> <v: VariableDeclareFactor?> "END_FUNCTION" => FunctionDeclare::new(name, DeclareClass::Function, ty, v.unwrap_or(vec![])),
    "PROGRAM" <name: "IDENTIFIER"> ":" <ty: Type?> <v: VariableDeclareFactor?> "END_PROGRAM" => FunctionDeclare::new(name, DeclareClass::Program, ty, v.unwrap_or(vec![])),
}

TypeDeclaration: DeclarationStatement = {
    <name: "IDENTIFIER"> ":" "(" <fields: Comma<EnumFieldDecl>> ")" <ty: Type?> ";" => DeclarationStatement::enum_(Box::new(EnumDeclare::new(name, ty, fields))),
    <name: "IDENTIFIER"> ":" <alias: Type> ";" => DeclarationStatement::alias(Box::new(AliasDeclare::new(<>))),
    <name: "IDENTIFIER"> ":" "STRUCT" <vars: VariableDeclareList> "END_STRUCT" => DeclarationStatement::struct_(Box::new(StructDeclare::new(<>))),
}

EnumFieldDecl: EnumField = {
    <name: "IDENTIFIER"> => EnumField::new(name, None),
    <name: "IDENTIFIER"> ":=" <value: "LITERAL"> => EnumField::new(name, Some(value)),
}

/// Type
Type: Rc<Box<dyn Type>> = {
    "INT" => Rc::new(Box::new(IntType::new())),
    "BOOL" => Rc::new(Box::new(BoolType::new())),
    "IDENTIFIER" => Rc::new(Box::new(UserType::from_name(<>))),
}

/// Variable declare groups flat
VariableDeclareFactor: Vec<Rc<Variable>> = {
    VariableDeclareGroup,
    <mut v: VariableDeclareFactor> <mut e: VariableDeclareGroup> => { v.append(&mut e); v }
}

/// Single variable declare group, constain a list of same scope variable
VariableDeclareGroup: Vec<Rc<Variable>> = {
    VariableDeclareGroupStart VariableDeclareGroupAnnotation? "END_VAR" => vec![],
    <g: VariableDeclareGroupStart> <anno: VariableDeclareGroupAnnotation?> <v: VariableDeclareList> "END_VAR" => VariableDeclareGroup::new(g, anno, v),
}

VariableDeclareGroupStart: VariableScopeClass = {
    "VAR" => VariableScopeClass::None,
    "VAR_GLOBAL" => VariableScopeClass::Global,
    "VAR_INPUT" => VariableScopeClass::Input,
    "VAR_INOUT" => VariableScopeClass::InOut,
    "VAR_OUTPUT" => VariableScopeClass::Output,
    "VAR_TEMP" => VariableScopeClass::Temp,
    "VAR_STAT" => VariableScopeClass::Static,
}

VariableDeclareGroupAnnotation: VariableAnnotationFlags = {
    "RETAIN" => VariableAnnotationFlags::RETAIN,
    "PERSISTENT" => VariableAnnotationFlags::PERSISTENT,
    "RETAIN" "PERSISTENT" => VariableAnnotationFlags::RETAINPERSISTENT,
    "PERSISTENT" "RETAIN" => VariableAnnotationFlags::RETAINPERSISTENT,
}

/// A list of same scope varaible
VariableDeclareList: Vec<Rc<Variable>> = {
    MultiVariableDeclareStatement,
    VariableDeclareStatement => vec![<>],
    <mut v: VariableDeclareList> <e: VariableDeclareStatement> => { v.push(e); v },
    <mut v: VariableDeclareList> <mut e: MultiVariableDeclareStatement> => { v.append(&mut e); v }
}

/// Single variable declare
VariableDeclareStatement: Rc<Variable> = {
    <ident: "IDENTIFIER"> ":" <ty: Type> ";"  => Rc::new(Variable::with_type(<>)),
}

/// Multiple variable declare in one statement
MultiVariableDeclareStatement: Vec<Rc<Variable>> = {
    <ident_list: Comma<"IDENTIFIER">> ":" <ty: Type> ";" => Variable::multiple_variable_with_type(<>),
}